<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">
	
	
	<context:component-scan base-package="am.fourTrade.shoppingBackend" />
	
	<!--We should not provide any security for our static resources(css/javascript)  -->
	<!--Add a separate http element to allow loading the static resources which does not require any form of security-->
	<http pattern="/resources/**" security="none" />
	
	

	<http>
		<!-- Access to login page to all the user -->
		<intercept-url pattern="/login" access="permitAll" />
		<!-- Difference bewteen hasRole and hasAuthority is that in hasAuthority we don't write ROLE in front in <user-service> part  -->
		<!-- <intercept-url pattern="/**" access="hasRole('USER')" /> -->
		<intercept-url pattern="/**" access="hasAuthority('USER')" />	
		<form-login login-page="/login" />
		<logout />
	</http>

	<authentication-manager>
		<authentication-provider>
			<!-- <user-service>
				Password is prefixed with {noop} to indicate to DelegatingPasswordEncoder 
					that NoOpPasswordEncoder should be used. This is not safe for production, 
					but makes reading in samples easier. Normally passwords should be hashed 
					using BCrypt
				<user name="rafi" password="rafipassword" authorities="USER, ADMIN" />
				<user name="bob" password="{noop}bobspassword" authorities="ROLE_USER" />
			</user-service> -->
			<!-- "dataSource" comes from hibernate configuration -->
			<jdbc-user-service data-source-ref="dataSource"		
				users-by-username-query="select email, password, enabled from user_detail where email= ?"
				authorities-by-username-query="select email, role from user_detail where email = ?"
			/>
			
		</authentication-provider>
	</authentication-manager>
</beans:beans>